#include <stdio.h>
#include<string.h>
#include<ctype.h>
#include<math.h>

void push(char);
char pop();
int pr(char);
int isOperator(char);

void pushs(int);
int pops();
int compute(int,int,char);


#define Maxsize 100
char stack[Maxsize];
int top=-1;




void main()
{
    int i,j=0,p,q,t,result;
    char infix[Maxsize],postfix[Maxsize],x,op;
    printf("Enter the infix expression: ");
    scanf("%s",infix);
    int len =strlen(infix);
    infix[len]=')';
    infix[len+1]='\0';
    printf("%s\n",infix);
    char item;
    for(i=0;infix[i]!='\0';i++)
    {
        item=infix[i];
       
        if (item=='(')
        {
            push(item);
        }
        else if(isalpha(item))
        {
            postfix[j]=item;
            j++;
        }
        else if (item==')')
        {
            while(top >= 0 && stack[top] != '(')
            {
                x = pop();
                postfix[j]=x;
                j++;
            }
            if(top!=-1)
            {
            x=pop();
            }
        }
        else if (isOperator(item))
        {
            if (pr(stack[top]) >= pr(item) && stack[top] != '^')
            {
                while (top >= 0 && pr(stack[top]) >= pr(item))
                {
                    x = pop();
                    postfix[j] = x;
                    j++;
                }
            }
            push(item);
               
        }
       
    }
    postfix[j]='\0';
    printf("Postfix expression: %s",postfix);
    top=-1;
    int value;
    for(i=0;postfix[i]!='\0';i++)
    {
    	item=postfix[i];
		if(isalpha(item))
		{
			printf("Enter the value for %c:",item);
			scanf("%d",&value);
			pushs(value);
		}
		else
		{
			op=item;
			p=pops();
			q=pops();
			t=compute(q,p,op);
			pushs(t);
		}
    }
   result=pops();
	printf("After the evaluation: %d",result);
    
}


int isOperator(char c) {
    if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
        return 1;
    }
    return 0;
}

void push(char c)
{  
    if (top==Maxsize-1)
    {
        printf("Stack is full");    
    }
    else
    {
        top=top+1;
        stack[top]=c;
    }
}

char pop()
{
    int c;
    if(top!=-1)
    {
        c=stack[top];
       top=top-1;
       
    }
    else
    {
       printf("Stack is empty");
    }
    return c;
}

int pr(char c)
{
    switch (c) {
        case '+':
        case '-':
            return 1;
            break;
        case '*':
        case '/':
            return 2;
            break;
        case '^':
            return 3;
            break;
        default:
            return 0;
            break;
    }
}

int compute(int y,int x, char op)
{
	int c,r=1;
	switch(op)
	{
		case '+':
			c=y+x;
			break;
		
		case'-':
			c=y-x;
			break;
		
		case '*':
			c=y*x;
			break;
			
		case '/':
			c=y/x;
			break;
		case '^':
			c=pow(y,x);
			break;
	}
	return c;
}

int pops()
{
	int c;
	if(top==-1)
	{
		printf("Stack empty ");
	}
	else
	{
		c=stack[top];
		top=top-1;
		return c;
	}
}

void pushs(int c)
{
	if(top==Maxsize-1)
	{
		printf("Stack is full");
	}
	else
	{
		top=top+1;
		stack[top]=c;
	}
}
