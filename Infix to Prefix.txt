#include<stdio.h>
#include<string.h>
#include<ctype.h>
#include<math.h>

#define Maxsize 100
char stack[Maxsize];
int top=-1;

void push(char);
char pop();
int pr(char);
int isOperator(char);


void main()
{	
	int i,j=0,p,q,t,result;
   char infix[Maxsize],infixreverse[Maxsize],x,op,prefixreverse[Maxsize],prefix[Maxsize];
   top=0;
   stack[top]='(';
   printf("Enter the infix expression: ");
   scanf("%s",infix);
   int len = strlen(infix);
   int k=0;
   for(i=len-1;i>=0;i--)
   {	
   	if(infix[i]=='(')
   	{
   		infix[i]=')';
   		infixreverse[k]=infix[i];
   		k++;
   	}
   	else if(infix[i]==')')
   	{
   		infix[i]='(';
   		infixreverse[k]=infix[i];
   		k++;
   	}
   	else{
   		infixreverse[k]=infix[i];
   		k++;
   	}
   	
   }
   infixreverse[k]=')';
   infixreverse[k+1]='\0';
   printf("Infix_Reverse= %s\n",infixreverse);
   
   char item;
    for(i=0;infixreverse[i]!='\0';i++)
    {
        item=infixreverse[i];
       
        if (item=='(')
        {
            push(item);
        }
        else if(isalpha(item))
        {
            prefixreverse[j]=item;
            j++;
        }
        else if (item==')')
        {
            while(top >= 0 && stack[top] != '(')
            {
                x = pop();
                prefixreverse[j]=x;
                j++;
            }
            
            x=pop();
            
            
        }
        else if (isOperator(item))
        {
            if (stack[top]=='^'&& item=='^')
            {
            	push(item);
            }
            else
            {
            	while(pr(stack[top])>=pr(item))
            	{
            		x=pop();
            		prefixreverse[j]=x;
            		j++;
            	}
            	push(item);
            }
               
        }
        /*else
        	{
         	push(item);
         }
       */
    }
    prefixreverse[j]='\0';
    printf("Prefix reverse expression: %s",prefixreverse);
    len=0;
    len=strlen(prefixreverse);
    k=0;
    for(i=len-1;i>=0;i--)
    {	
   	if(prefixreverse[i]=='(')
   	{
   		prefixreverse[i]=')';
   		prefix[k]=prefixreverse[i];
   		k++;
   	}
   	else if(prefixreverse[i]==')')
   	{
   		prefixreverse[i]='(';
   		prefix[k]=prefixreverse[i];
   		k++;
   	}
   	else{
   		prefix[k]=prefixreverse[i];
   		k++;
   	}
   	
   }
   
   prefix[k]='\0';
   printf("\nPrefix = %s",prefix);
   
}


int isOperator(char c) {
    if (c == '+' || c == '-' || c == '*' || c == '/' || c == '^') {
        return 1;
    }
    return 0;
}

void push(char c)
{  
    if (top==Maxsize-1)
    {
        printf("Stack is full");    
    }
    else
    {
        top=top+1;
        stack[top]=c;
    }
}

char pop()
{
    int c;
    if(top!=-1)
    {
        c=stack[top];
       top=top-1;
       
    }
    else
    {
       printf("Stack is empty");
    }
    return c;
}

int pr(char c)
{
    switch (c) {
        case '+':
        case '-':
            return 1;
            break;
        case '*':
        case '/':
            return 2;
            break;
        case '^':
            return 3;
            break;
        default:
            return 0;
            break;
    }
}

